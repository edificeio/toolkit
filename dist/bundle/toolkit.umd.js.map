{"version":3,"file":null,"sources":["../../src/minicast.ts","../../src/eventer.ts","../../src/selection.ts","../../src/crud/abstract.crud.ts","../../src/crud/crud.ts","../../src/crud/abstract.collection.ts","../../src/crud/collection.ts","../../src/crud/abstract.model.ts","../../src/crud/model.ts"],"sourcesContent":["function mapToArray(map) {\n    var result = [];\n\n    map.forEach(function (item) {\n        result.push(item);\n    });\n    return result;\n}\n\nexport type mixCast = { type: Function, deps?: Array<any>, single? : boolean }\nexport type mixCasts = { [key: string]: mixCast | Function }\n\nexport interface Mixable {\n    mixin(data: any)\n}\n\nexport class Mix {\n    static extend(obj, mixin, casts?: mixCasts) {\n        for (var property in mixin) {\n            let value = mixin[property]\n\n            if(casts && casts[property] && value) {\n\n                let castItem = casts[property]\n                let cast : mixCast\n\n                if(castItem instanceof Function){\n                    cast = {\n                        type: castItem,\n                        deps: []\n                    }\n                } else {\n                    cast = {\n                        type: castItem.type,\n                        single: castItem.single,\n                        deps: castItem.deps ? castItem.deps : []\n                    }\n                }\n\n                let doCast = (v) => {\n                    let instance = new (cast.type as any)(...cast.deps)\n                    if(instance.mixin)\n                        instance.mixin(v)\n                    else\n                        Mix.extend(instance, v)\n                    return instance\n                }\n\n                if(value instanceof Array && cast.single) {\n                    obj[property] = []\n                    value.forEach(v => {\n                        obj[property].push(doCast(v))\n                    })\n                } else {\n                    obj[property] = doCast(value)\n                }\n            }\n            else if (!value || typeof value !== 'object' || value instanceof Array) {\n                obj[property] = value;\n            }\n            else {\n                if (obj[property] instanceof TypedArray) {\n                    obj[property].load(value);\n                }\n                else {\n                    if (!obj[property]) {\n                        obj[property] = {};\n                    }\n                    this.extend(obj[property], value);\n                }\n            }\n        }\n    }\n\n    static castAs(className, obj, params: any = {}) {\n        var newObj = new (className as any)(params);\n        this.extend(newObj, obj);\n        return newObj;\n    }\n\n    static castArrayAs(className, arr: Array<any>, params: any[] = []) {\n        var newArr = [];\n        arr.forEach((item) => {\n            newArr.push(\n                Mix.castAs(className, item, params)\n            );\n        });\n        return newArr;\n    }\n}\n\nexport class TypedArray<T> extends Array {\n    className: any;\n    private mixin: any;\n\n    constructor(className: any, mixin: any = {}) {\n        super();\n        this.className = className;\n        this.mixin = mixin;\n    }\n\n    push(...items: any[]): number {\n        items.forEach((item) => {\n            if (!(item instanceof this.className)) {\n                item = Mix.castAs(this.className, item);\n            }\n            for (var prop in this.mixin) {\n                item[prop] = this.mixin[prop]\n            }\n\n            Array.prototype.push.call(this, item);\n        });\n\n        return this.length;\n    }\n\n    load(data) {\n        data.forEach((item) => {\n            this.push(item);\n        });\n    }\n\n    asArray() {\n        return mapToArray(this);\n    }\n\n    toJSON() {\n        return mapToArray(this);\n    }\n}","export class Eventer{\n    private events: Map<string, ((data?: any) => void)[]>;\n\n    constructor(){\n        this.events = new Map<string, ((data?: any) => void)[]>();\n    }\n\n    trigger(eventName: string, data?: any): void{\n        if(this.events[eventName]){\n            this.events[eventName](data);\n        }\n    }\n\n    on(eventName: string, cb: (data?: any) => void): void {\n        if(!this.events[eventName]){\n            this.events[eventName] = [];\n        }\n\n        this.events[eventName].push(cb);\n    }\n\n    off(eventName: string, cb?: (data?: any) => void): void {\n        if(!this.events[eventName]){\n            return;\n        }\n\n        if(cb === undefined){\n            this.events[eventName] = [];\n            return;\n        }\n\n        let index = this.events[eventName].indexOf(cb);\n        if(index !== -1){\n            this.events[eventName].splice(index, 1);\n        }\n    }\n\n    once(eventName: string, cb: (data?: any) => void): void {\n        let callback = (data) => {\n            cb(data);\n            this.off(eventName, callback);\n        };\n\n        this.on(eventName, callback);\n    }\n}","export interface Selectable{\n    selected: boolean;\n}\n\nexport class Selection<T extends Selectable>{\n    private selectedElements: T[];\n    constructor(private arr: T[]){}\n\n    selectAll(){\n        for(let i = 0; i < this.arr.length; i++){\n            this.arr[i].selected = true;\n        }\n    }\n\n    select(filter: (T) => boolean){\n        for(let i = 0; i < this.arr.length; i++){\n            this.arr[i].selected = filter(this.arr[i]);\n        }\n    }\n\n    deselect(filter: (T) => boolean){\n        for(let i = 0; i < this.arr.length; i++){\n            this.arr[i].selected = !filter(this.arr[i]);\n        }\n    }\n\n    deselectAll() {\n        for (let i = 0; i < this.arr.length; i++) {\n            this.arr[i].selected = false;\n        }\n    }\n\n    removeSelection() {\n        let newArr = [];\n        for (let i = 0; i < this.arr.length; i++) {\n            if (this.arr[i].selected) {\n                newArr.push(this.arr[i]);\n            }\n        }\n\n        this.arr.splice(0, this.arr.length);\n        for (let i = 0; i < newArr.length; i++) {\n            this.arr.push(newArr[i]);\n        }\n    }\n\n    updateSelected(){\n        for(let i = 0; i < this.arr.length; i++){\n            let index = this.selectedElements.indexOf(this.arr[i]);\n            if(this.arr[i].selected && index === -1){\n                this.selectedElements.push(this.arr[i]);\n            }\n            else if(!this.arr[i].selected && index !== -1){\n                this.selectedElements.splice(index, 1);\n            }\n        }\n    }\n\n    // a specific array is maintained to avoid references breaking all the time\n    get selected(): T[]{\n        this.updateSelected();\n        return this.selectedElements;\n    }\n}","import { Mix, mixCasts, mixCast } from '../minicast'\nimport { Http, HttpResponse } from '../http.interface'\n\nexport interface CrudApi {\n    create?: string | (() => string)\n    sync?: string | (() => string)\n    update?: string | (() => string)\n    delete?: string | (() => string)\n}\n\nexport abstract class AbstractCrud<T> {\n\n    protected abstract http: Http\n\n    constructor(\n        protected api: CrudApi,\n        protected model: T |Â T[],\n        protected initialCast?: mixCast | Function,\n        protected childrenCasts?: mixCasts,\n        protected customMixin?: (payload: any) => void){}\n\n    private parseApi(api: string | (() => string), parameters?: {}) {\n        if(typeof api === 'function') {\n            api = api()\n        }\n\n        return api.split(/(:[a-zA-Z0-9_.]+)/)\n            .map((fragment : string) => {\n                return fragment.charAt(0) === ':' ?\n                    parameters && parameters[fragment.substr(1)] ||\n                    this.model[fragment.substr(1)] ||\n                    this[fragment.substr(1)] ||\n                    fragment :\n                    fragment\n            }).join('')\n    }\n\n    private defaultMixin(payload: any): void {\n        if(payload instanceof Array && this.model instanceof Array) {\n            let model = this.model //fix type inference\n            model.length = 0\n            payload.forEach(item => {\n                let instance = {} as T\n                if(this.initialCast) {\n                    if(this.initialCast instanceof Function) {\n                        instance = new (this.initialCast as any)()\n                    } else {\n                        instance = new (this.initialCast.type as any)(...this.initialCast.deps)\n                    }\n                }\n                Mix.extend(instance, item, this.childrenCasts)\n                model.push(instance)\n            })\n        } else {\n            Mix.extend(this.model, payload, this.childrenCasts)\n        }\n    }\n\n    create(item?: T, opts: {} = {}) {\n        if(!this.api.create) {\n            throw '[Crud][Api] \"create\" route is undefined'\n        }\n\n        return this.http.post(this.parseApi(this.api.create, item), item || this.model, opts)\n             .then((response: HttpResponse) => {\n                if(this.model instanceof Array) {\n                    this.model.push(item)\n                }\n                return response\n             })\n    }\n\n    sync(opts: {}  = {}) : Promise<HttpResponse> {\n        if(!this.api.sync) {\n            throw '[Crud][Api] \"sync\" route is undefined'\n        }\n\n        return this.http.get(this.parseApi(this.api.sync), opts)\n            .then((response: HttpResponse) => {\n                (this.customMixin || this.defaultMixin).bind(this)(response.data)\n                return response\n            })\n    }\n\n    update(item?: T, opts: {} = {}) {\n        if(!this.api.update) {\n            throw '[Crud][Api] \"update\" route is undefined'\n        }\n\n        return this.http.put(this.parseApi(this.api.update, item), item || this.model, opts)\n    }\n\n    delete(item?: T, opts: {}  = {}) {\n        if(!this.api.delete) {\n            throw '[Crud][Api] \"delete\" route is undefined'\n        }\n\n        return this.http.delete(this.parseApi(this.api.delete, item), opts)\n            .then((response: HttpResponse) => {\n                if(this.model instanceof Array){\n                    this.model.splice(this.model.indexOf(item), 1)\n                }\n                return response\n            })\n    }\n\n\n}","import http from 'axios'\n\nimport { Http } from '../http.interface'\nimport { AbstractCrud } from './abstract.crud'\n\nexport class Crud<T> extends AbstractCrud<T> {\n\n    protected http: Http = http as any\n\n}","import { AbstractCrud, CrudApi } from './abstract.crud'\nimport { Mix, Mixable, mixCasts, mixCast } from '../minicast'\n\nexport abstract class AbstractCollection<T> extends AbstractCrud<T> implements Mixable {\n\n    public data: T[] = []\n\n    constructor(api: CrudApi, initialCast?: mixCast | Function, childrenCasts?: mixCasts) {\n        super(api, null, initialCast, childrenCasts)\n        this.model = this.data\n        this.customMixin = this.mixin\n    }\n\n    public mixin(data: Array<any>) : void {\n        if(!data || !(data instanceof Array)) {\n            throw \"[Crud][Collection] An Array payload is expected.\"\n        }\n\n        this.data.length = 0\n\n        data.forEach(item => {\n            let instance = {} as T\n            if(this.initialCast) {\n                if(this.initialCast instanceof Function) {\n                    instance = new (this.initialCast as any)()\n                } else {\n                    instance = new (this.initialCast.type as any)(...this.initialCast.deps)\n                }\n            }\n            Mix.extend(instance, item, this.childrenCasts)\n            this.data.push(instance)\n        })\n    }\n\n}","import http from 'axios'\n\nimport { AbstractCollection } from './abstract.collection'\nimport { CrudApi } from './abstract.crud'\nimport { Mix, Mixable, mixCasts, mixCast } from '../minicast'\nimport { Http } from '../http.interface'\n\nexport class Collection<T> extends AbstractCollection<T>{\n\n    protected http: Http = http as any\n\n    constructor(api: CrudApi, initialCast?: mixCast | Function, childrenCasts?: mixCasts){\n        super(api, initialCast, childrenCasts)\n    }\n\n}","import { AbstractCrud, CrudApi } from './abstract.crud'\nimport { Mix, Mixable, mixCasts, mixCast } from '../minicast'\n\nexport abstract class AbstractModel<T> extends AbstractCrud<T> implements Mixable {\n\n    constructor(api: CrudApi, childrenCasts?: mixCasts) {\n        super(api, null, null, childrenCasts)\n        this.model = (this as any)\n        this.customMixin = this.mixin\n    }\n\n    public mixin(data: Object) : void {\n        if(!data || !(data instanceof Object)) {\n            throw \"[Crud][Collection] An Object payload is expected.\"\n        }\n\n        Mix.extend(this, data, this.childrenCasts)\n    }\n\n}","import http from 'axios'\n\nimport { AbstractModel } from './abstract.model'\nimport { CrudApi } from './abstract.crud'\nimport { Http } from '../http.interface'\nimport { mixCasts } from '../minicast'\n\nexport class Model<T> extends AbstractModel<T> {\n\n    protected http: Http = http as any\n\n    constructor(api: CrudApi, childrenCasts?: mixCasts) {\n        super(api, childrenCasts)\n    }\n\n}"],"names":["map","result","forEach","item","push","Mix","obj","mixin","casts","value","property","cast_1","castItem","Function","type","deps","single","doCast_1","v","instance","_a","extend","Array","TypedArray","load","this_1","className","params","newObj","this","arr","newArr","castAs","_super","_this","__extends","_i","items","prop","prototype","call","length","data","mapToArray","events","Map","Eventer","eventName","cb","undefined","index","indexOf","splice","callback","off","on","Selection","i","selected","filter","selectedElements","Object","updateSelected","api","model","initialCast","childrenCasts","customMixin","AbstractCrud","parameters","split","fragment","charAt","substr","join","payload","model_1","opts","create","http","post","parseApi","then","response","sync","get","defaultMixin","bind","update","put","AbstractCollection","AbstractModel"],"mappings":"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"}