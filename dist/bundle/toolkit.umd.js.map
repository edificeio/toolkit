{"version":3,"file":null,"sources":["../../src/minicast.ts","../../src/autosaver.ts","../../src/eventer.ts","../../src/selection.ts","../../src/crud/abstract.crud.ts","../../src/crud/crud.ts","../../src/crud/abstract.collection.ts","../../src/crud/collection.ts","../../src/crud/abstract.model.ts","../../src/crud/model.ts","../../src/provider.ts"],"sourcesContent":["function mapToArray(map) {\n    var result = [];\n\n    map.forEach(function (item) {\n        result.push(item);\n    });\n    return result;\n}\n\nexport type mixCast = { type: Function, deps?: Array<any>, single? : boolean }\nexport type mixCasts = { [key: string]: mixCast | Function }\n\nexport interface Mixable {\n    mixin(data: any)\n}\n\nexport class Mix {\n    static extend(obj, mixin, casts?: mixCasts) {\n        for (var property in mixin) {\n            let value = mixin[property]\n\n            if(casts && casts[property] && value) {\n\n                let castItem = casts[property]\n                let cast : mixCast\n\n                if(castItem instanceof Function){\n                    cast = {\n                        type: castItem,\n                        deps: []\n                    }\n                } else {\n                    cast = {\n                        type: castItem.type,\n                        single: castItem.single,\n                        deps: castItem.deps ? castItem.deps : []\n                    }\n                }\n\n                let doCast = (v) => {\n                    let instance = new (cast.type as any)(...cast.deps)\n                    if(instance.mixin)\n                        instance.mixin(v)\n                    else\n                        Mix.extend(instance, v)\n                    return instance\n                }\n\n                if(value instanceof Array && cast.single) {\n                    obj[property] = []\n                    value.forEach(v => {\n                        obj[property].push(doCast(v))\n                    })\n                } else {\n                    obj[property] = doCast(value)\n                }\n            }\n            else if (!value || typeof value !== 'object' || value instanceof Array) {\n                obj[property] = value;\n            }\n            else {\n                if (obj[property] instanceof TypedArray) {\n                    obj[property].load(value);\n                }\n                else {\n                    if (!obj[property]) {\n                        obj[property] = {};\n                    }\n                    this.extend(obj[property], value);\n                }\n            }\n        }\n        if(obj && obj.fromJSON){\n            obj.fromJSON(mixin);\n        }\n    }\n\n    static castAs(className, obj, params: any = {}) {\n        var newObj = new (className as any)(params);\n        this.extend(newObj, obj);\n        return newObj;\n    }\n\n    static castArrayAs(className, arr: Array<any>, params: any = {}) {\n        var newArr = [];\n        arr.forEach((item) => {\n            newArr.push(\n                Mix.castAs(className, item, params)\n            );\n        });\n        return newArr;\n    }\n}\n\nexport class TypedArray<T> extends Array {\n    className: any;\n    private mixin: any;\n\n    constructor(className: any, mixin: any = {}) {\n        super();\n        this.className = className;\n        this.mixin = mixin;\n    }\n\n    push(...items: any[]): number {\n        items.forEach((item) => {\n            if (!(item instanceof this.className)) {\n                item = Mix.castAs(this.className, item);\n            }\n            for (var prop in this.mixin) {\n                item[prop] = this.mixin[prop]\n            }\n\n            Array.prototype.push.call(this, item);\n        });\n\n        return this.length;\n    }\n\n    load(data) {\n        data.forEach((item) => {\n            this.push(item);\n        });\n    }\n\n    asArray() {\n        return mapToArray(this);\n    }\n\n    toJSON() {\n        return mapToArray(this);\n    }\n}","import http from 'axios';\n\nexport interface AutosaveElement{\n    model: any;\n    path?: string;\n    method?: string;\n    _backup?: string;\n    fn?: () => void\n}\n\nlet autosaved: AutosaveElement[] = [];\nlet loopStarted = false;\nlet token;\n\nlet loop = () => {\n    autosaved.forEach((item: AutosaveElement) => {\n        if(item._backup !== JSON.stringify(item.model)){\n            if(item.fn){\n                item.fn();\n            }\n            else{\n                http[item.method](item.path, item.model);\n            }\n            \n            item._backup = JSON.stringify(item.model);\n        }\n    });\n    loopStarted = true;\n    token = setTimeout(loop, 500);\n};\n\nexport class Autosave{\n    static watch(path: string | (() => void), model: any, method = 'put'){\n        if(autosaved.findIndex((e) => e.model === model && e.path === path) !== -1){\n            return;\n        }\n        let autosave;\n        if(typeof path === 'string'){\n            autosave = {\n                model: model,\n                path: path,\n                method: method\n            };\n        }\n        else{\n            autosave = {\n                model: model,\n                fn: path,\n                method: method\n            };\n        }\n        \n        autosaved.push(autosave);\n        if(!loopStarted){\n            loop();\n        }\n    }\n\n    static unwatch(model: any){\n        let index = autosaved.findIndex((e) => e.model === model);\n        autosaved.splice(index, 1);\n        if(autosaved.length === 0){\n            this.unwatchAll();\n        }\n    }\n\n    static unwatchAll(){\n        autosaved = [];\n        clearTimeout(token);\n        loopStarted = false;\n    }\n}","export class Eventer{\n    private events: Map<string, ((data?: any) => void)[]>;\n\n    constructor(){\n        this.events = new Map<string, ((data?: any) => void)[]>();\n    }\n\n    trigger(eventName: string, data?: any): void{\n        if (this.events[eventName]) {\n            this.events[eventName].forEach((f) => f(data));\n        }\n    }\n\n    on(eventName: string, cb: (data?: any) => void): void {\n        if(!this.events[eventName]){\n            this.events[eventName] = [];\n        }\n\n        this.events[eventName].push(cb);\n    }\n\n    off(eventName: string, cb?: (data?: any) => void): void {\n        if(!this.events[eventName]){\n            return;\n        }\n\n        if(cb === undefined){\n            this.events[eventName] = [];\n            return;\n        }\n\n        let index = this.events[eventName].indexOf(cb);\n        if(index !== -1){\n            this.events[eventName].splice(index, 1);\n        }\n    }\n\n    once(eventName: string, cb: (data?: any) => void): void {\n        let callback = (data) => {\n            cb(data);\n            this.off(eventName, callback);\n        };\n\n        this.on(eventName, callback);\n    }\n}","export interface Selectable{\n    selected: boolean;\n}\n\nexport class Selection<T extends Selectable>{\n    private selectedElements: T[];\n    constructor(private arr: T[]) {\n        this.selectedElements = [];\n    }\n\n    get all(): T[]{\n        return this.arr;\n    }\n\n    set all(all: T[]) {\n        this.arr = all;\n    }\n\n    filter(filter) {\n        return this.arr.filter(filter);\n    }\n\n    push(item: T) {\n        this.arr.push(item);\n    }\n\n    addRange(arr: T[]){\n        for(let i = 0; i < arr.length; i++){\n            this.all.push(arr[i]);\n        }\n    }\n\n    get colLength(): number {\n        return this.arr.length;\n    }\n\n    get length(): number {\n        return this.selected.length;\n    }\n\n    forEach(func: (item) => void){\n        this.arr.forEach(func);\n    }\n\n    selectAll(){\n        for(let i = 0; i < this.arr.length; i++){\n            this.arr[i].selected = true;\n        }\n    }\n\n    select(filter: (T) => boolean){\n        for(let i = 0; i < this.arr.length; i++){\n            this.arr[i].selected = filter(this.arr[i]);\n        }\n    }\n\n    deselect(filter: (T) => boolean){\n        for(let i = 0; i < this.arr.length; i++){\n            this.arr[i].selected = !filter(this.arr[i]);\n        }\n    }\n\n    deselectAll() {\n        for (let i = 0; i < this.arr.length; i++) {\n            this.arr[i].selected = false;\n        }\n    }\n\n    removeSelection() {\n        let newArr = [];\n        for (let i = 0; i < this.arr.length; i++) {\n            if (!this.arr[i].selected) {\n                newArr.push(this.arr[i]);\n            }\n        }\n\n        this.arr.splice(0, this.arr.length);\n        for (let i = 0; i < newArr.length; i++) {\n            this.arr.push(newArr[i]);\n        }\n    }\n\n    updateSelected(){\n        for(let i = 0; i < this.arr.length; i++){\n            let index = this.selectedElements.indexOf(this.arr[i]);\n            if(this.arr[i].selected && index === -1){\n                this.selectedElements.push(this.arr[i]);\n            }\n            else if(!this.arr[i].selected && index !== -1){\n                this.selectedElements.splice(index, 1);\n            }\n        }\n\n        for (let i = 0; i < this.selectedElements.length; i++) {\n            let index = this.arr.indexOf(this.selectedElements[i]);\n            if (index === -1) {\n                this.selectedElements.splice(index, 1);\n            }\n        }\n    }\n\n    // a specific array is maintained to avoid references breaking all the time\n    get selected(): T[]{\n        this.updateSelected();\n        return this.selectedElements;\n    }\n}","import { Mix, mixCasts, mixCast } from '../minicast'\nimport { Http, HttpResponse } from '../http.interface'\n\nexport interface CrudApi {\n    create?: string | (() => string)\n    sync?: string | (() => string)\n    update?: string | (() => string)\n    delete?: string | (() => string)\n}\n\nexport abstract class AbstractCrud<T> {\n\n    protected abstract http: Http\n\n    constructor(\n        protected api: CrudApi,\n        protected model: T | T[],\n        protected initialCast?: mixCast | Function,\n        protected childrenCasts?: mixCasts,\n        protected customMixin?: (payload: any) => void){}\n\n    protected parseApi(api: string | (() => string), parameters?: {}) {\n        if(typeof api === 'function') {\n            api = api()\n        }\n\n        return api.split(/(:[a-zA-Z0-9_.]+)/)\n            .map((fragment : string) => {\n                return fragment.charAt(0) === ':' ?\n                    parameters && parameters[fragment.substr(1)] ||\n                    this.model[fragment.substr(1)] ||\n                    this[fragment.substr(1)] ||\n                    fragment :\n                    fragment\n            }).join('')\n    }\n\n    private defaultMixin(payload: any): void {\n        if(payload instanceof Array && this.model instanceof Array) {\n            this.model = []\n            let model = this.model //fix type inference\n            payload.forEach(item => {\n                let instance = {} as T\n                if(this.initialCast) {\n                    if(this.initialCast instanceof Function) {\n                        instance = new (this.initialCast as any)()\n                    } else {\n                        instance = new (this.initialCast.type as any)(...this.initialCast.deps)\n                    }\n                }\n                Mix.extend(instance, item, this.childrenCasts)\n                model.push(instance)\n            })\n        } else {\n            Mix.extend(this.model, payload, this.childrenCasts)\n        }\n    }\n\n    create(item?: T, opts: {} = {}) {\n        if(!this.api.create) {\n            throw '[Crud][Api] \"create\" route is undefined'\n        }\n\n        return this.http.post(this.parseApi(this.api.create, item), item || this.model, opts)\n             .then((response: HttpResponse) => {\n                if(this.model instanceof Array) {\n                    this.model.push(item)\n                }\n                return response\n             })\n    }\n\n    sync(opts: {}  = {}) : Promise<HttpResponse> {\n        if(!this.api.sync) {\n            throw '[Crud][Api] \"sync\" route is undefined'\n        }\n\n        return this.http.get(this.parseApi(this.api.sync), opts)\n            .then((response: HttpResponse) => {\n                (this.customMixin || this.defaultMixin).bind(this)(response.data)\n                return response\n            })\n    }\n\n    update(item?: T, opts: {} = {}) {\n        if(!this.api.update) {\n            throw '[Crud][Api] \"update\" route is undefined'\n        }\n\n        return this.http.put(this.parseApi(this.api.update, item), item || this.model, opts)\n    }\n\n    delete(item?: T, opts: {}  = {}) {\n        if(!this.api.delete) {\n            throw '[Crud][Api] \"delete\" route is undefined'\n        }\n\n        return this.http.delete(this.parseApi(this.api.delete, item), opts)\n            .then((response: HttpResponse) => {\n                if(this.model instanceof Array){\n                    const index = this.model.indexOf(item);\n                    if (index !== -1) {\n                        this.model.splice(this.model.indexOf(item), 1)\n                    }\n                }\n                return response\n            })\n    }\n\n\n}","import http from 'axios'\n\nimport { Http } from '../http.interface'\nimport { AbstractCrud } from './abstract.crud'\n\nexport class Crud<T> extends AbstractCrud<T> {\n\n    protected http: Http = http as any\n\n}","import { AbstractCrud, CrudApi } from './abstract.crud'\nimport { Mix, Mixable, mixCasts, mixCast } from '../minicast'\n\nexport abstract class AbstractCollection<T> extends AbstractCrud<T> implements Mixable {\n\n    public data: T[] = []\n\n    constructor(api: CrudApi, initialCast?: mixCast | Function, childrenCasts?: mixCasts) {\n        super(api, null, initialCast, childrenCasts)\n        this.model = this.data\n        this.customMixin = this.mixin\n    }\n\n    public mixin(data: Array<any>) : void {\n        if(!data || !(data instanceof Array)) {\n            throw \"[Crud][Collection] An Array payload is expected.\"\n        }\n\n        this.data = []\n\n        data.forEach(item => {\n            let instance = {} as T\n            if(this.initialCast) {\n                if(this.initialCast instanceof Function) {\n                    instance = new (this.initialCast as any)()\n                } else {\n                    instance = new (this.initialCast.type as any)(...this.initialCast.deps)\n                }\n            }\n            Mix.extend(instance, item, this.childrenCasts)\n            this.data.push(instance)\n        })\n    }\n\n}","import http from 'axios'\n\nimport { AbstractCollection } from './abstract.collection'\nimport { CrudApi } from './abstract.crud'\nimport { Mix, Mixable, mixCasts, mixCast } from '../minicast'\nimport { Http } from '../http.interface'\n\nexport class Collection<T> extends AbstractCollection<T>{\n\n    protected http: Http = http as any\n\n    constructor(api: CrudApi, initialCast?: mixCast | Function, childrenCasts?: mixCasts){\n        super(api, initialCast, childrenCasts)\n    }\n\n}","import { AbstractCrud, CrudApi } from './abstract.crud'\nimport { Mix, Mixable, mixCasts, mixCast } from '../minicast'\n\nexport abstract class AbstractModel<T> extends AbstractCrud<T> implements Mixable {\n\n    constructor(api: CrudApi, childrenCasts?: mixCasts) {\n        super(api, null, null, childrenCasts)\n        this.model = (this as any)\n        this.customMixin = this.mixin\n    }\n\n    public mixin(data: Object) : void {\n        if(!data || !(data instanceof Object)) {\n            throw \"[Crud][Collection] An Object payload is expected.\"\n        }\n\n        Mix.extend(this, data, this.childrenCasts)\n    }\n\n}","import http from 'axios'\n\nimport { AbstractModel } from './abstract.model'\nimport { CrudApi } from './abstract.crud'\nimport { Http } from '../http.interface'\nimport { mixCasts } from '../minicast'\n\nexport class Model<T> extends AbstractModel<T> {\n\n    protected http: Http = http as any\n\n    constructor(api: CrudApi, childrenCasts?: mixCasts) {\n        super(api, childrenCasts)\n    }\n\n}","﻿import { Eventer } from './eventer';\nimport { Mix } from './minicast';\nimport http from 'axios';\n\n/*\n * Tool to manage a single list provider used by multiple objects (to avoid multiple call to a same path)\n * Usage :\n * let provider = new Provider<T>(path, MyClass);\n * function a(){\n *    //get data from provider\n *    let data = await provider.data();\n * }\n *\n * function b(){\n *    let data = await provider.data();\n *    //get data when a refresh happens\n *    provider.on('refresh', (newData) => data = newData));\n * }\n *\n * //force provider refresh (after data invalidation)\n * setTimeout(() => provider.refresh(), 50000);\n * \n * a();\n * b();\n*/\n\nexport class Provider<T> {\n    private _data: T[];\n    eventer: Eventer;\n    isSynced: boolean;\n    syncing: boolean;\n\n    constructor(public path: string, private className: Function) {\n        this._data = [];\n        this.eventer = new Eventer();\n    }\n\n    async data(): Promise<T[]> {\n        if (!this.isSynced && !this.syncing){\n            await this.sync();\n        }\n        if (this.syncing) {\n            await this.syncDone();\n        }\n        return this._data;\n    }\n\n    private async syncDone(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.eventer.once('sync', () => resolve());\n        });\n    }\n\n    private async sync(): Promise<void> {\n        this.syncing = true;\n        let response = await http.get(this.path);\n        this._data = Mix.castArrayAs(this.className, response.data);\n        this.isSynced = true;\n        this.eventer.trigger('sync');\n        this.syncing = false;\n    }\n\n    async refresh() {\n        this.isSynced = false;\n        await this.sync();\n        this.eventer.trigger('refresh');\n    }\n\n    push(data: T) {\n        this._data.push(data);\n    }\n\n    remove(data: T) {\n        let index = this._data.indexOf(data);\n        if (index === -1) return;\n        this._data.splice(index, 1);\n    }\n}"],"names":["map","result","forEach","item","push","token","Mix","obj","mixin","casts","property","value","cast_1","castItem","Function","type","deps","single","doCast_1","v","instance","_a","extend","Array","TypedArray","load","this_1","fromJSON","className","params","newObj","this","arr","newArr","castAs","_super","_this","__extends","_i","items","prop","prototype","call","length","data","mapToArray","events","Map","Eventer","eventName","f","cb","undefined","index","indexOf","splice","callback","off","on","selectedElements","Object","Selection","all","filter","i","selected","func","updateSelected","api","model","initialCast","childrenCasts","customMixin","AbstractCrud","parameters","split","fragment","charAt","substr","join","payload","model_1","opts","create","http","post","parseApi","then","response","sync","get","defaultMixin","bind","update","put","AbstractCollection","AbstractModel","path","_data","eventer","Provider","isSynced","syncing","syncDone","Promise","resolve","reject","once","castArrayAs","trigger","autosaved","loopStarted","loop","_backup","JSON","stringify","fn","method","setTimeout","Autosave","findIndex","e","autosave","unwatchAll","clearTimeout"],"mappings":"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"}